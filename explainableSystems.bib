@inproceedings{Chis15a,
     abstract={Object inspectors are an essential category of tools that allow developers to comprehend the run-time of object-oriented systems. Traditional object inspectors favor a generic view that focuses on the low-level details of the state of single objects. Based on 16 interviews with software developers and a follow-up survey with 62 respondents we identified a need for object inspectors that support different high-level ways to visualize and explore objects, depending on both the object and the current developer need. We propose the Moldable Inspector, a novel inspector model that enables developers to adapt the inspection workflow to suit their immediate needs by making the inspection context explicit, providing multiple interchangeable domain-specific views for each object, and supporting  a workflow that groups together multiple levels of connected objects. We show that the Moldable Inspector can address multiple kinds of development needs involving a wide range of objects.},
	 author = {Andrei Chi\c{s} and Tudor G\^irba and Oscar Nierstrasz and Aliaksei Syrel},
	 title = {The {Moldable} {Inspector}},
	 booktitle = {Proceedings of the 2015 ACM International Symposium on New Ideas, New Paradigms, and Reflections on Programming and Software},
	Annote = {internationalconference},
	 series = {Onward! 2015},
	 year = {2015},
	 location = {Pittsburgh, PA, USA},
	 pages = {44--60},
	 numpages = {17},
	 url = {http://scg.unibe.ch/archive/papers/Chis15a-MoldableInspector.pdf},
	 doi = {10.1145/2814228.2814234},
	 isbn = {978-1-4503-3688-8},
	 acmid = {2814234},
	 publisher = {ACM},
	 address = {New York, NY, USA},
	 keywords = {scg-pub scg15 jb16 snf-asa1, Andrei Chis, Tudor Girba, girba},
	 peerreview = {yes},
	 medium = {2}
}

@inproceedings{Chis16b,
	Abstract = {Developing and evolving software requires developers to continuously make decisions about how to steer the design and implementation of their applications. To make informed decisions developers commonly formulate detailed and domain-specific questions about their software systems and  use tools to explore available information and answer those questions. Development tools however focus on generic programming tasks while program comprehension and analysis tools typically are not tightly integrated with their development tools and environments. This  has a negative effect on program comprehension as it increases the effort and the time needed to obtain an answer. To improve program comprehension we propose that developers build software using development tools tailored to their specific application domains, as this can directly answer domain-specific questions. We introduce moldable development as an approach for developing software in which developers evolve development tools together with their applications.  In this paper we sketch the idea of moldable development and give examples to illustrate how it can be applied in practice. Through these examples we show that given a low cost for extending development tools, developers can create relevant and useful customizations to help them evolve their own applications.},
	Annote = {internationalworkshop},
	Author = {Andrei Chi\c{s} and Tudor G\^irba and Juraj Kubelka and Oscar Nierstrasz and Stefan Reichhart and Aliaksei Syrel},
	Booktitle = {Proceedings of the Programming Experience 2016 (PX/16) Workshop},
 	Series = {PX/16},
	Location={Rome, Italy},
	Title = {Exemplifying Moldable Development},
	Doi = {10.1145/2984380.2984385},
	Isbn = {978-1-4503-4776-1},
	Pages= {33--42},
	Numpages = {10},
	Year = {2016},
	Peerreview = {yes},
	Medium = {2},
        Acmid = {2984385},
	Publisher = {ACM},
	Address = {New York, NY, USA},
	Language={English},
	Url = {http://scg.unibe.ch/archive/papers/Chis16b-ExemplifyingMoldableDevelopment.pdf},
	Bdsk-Url-1 = {http://scg.unibe.ch/archive/papers/Chis16b-ExemplifyingMoldableDevelopment.pdf},
	Bdsk-Url-2 = {http://dx.doi.org/10.1145/2984380.2984385},
	Keywords = {scg-pub, snf-asa2, scg16, jb16, internationalworkshop, Andrei Chis, Domain-specific tools, User interfaces, Programming environments, Program comprehension, Tudor Girba, girba}
}

@incollection{Chis17a,
	Abstract = {Object-oriented programming aims to facilitate navigation between domain concepts and the code that addresses those domains by enabling developers to directly model those domain concepts in the code. To make informed decisions developers then  formulate detailed and domain-specific questions about their systems in terms of domain concepts, and use tools to explore available information and answer those questions. Development tools however focus mainly on object-oriented idioms and do not expose or exploit domain concepts constructed on top of object-oriented programming idioms. Analysis tools are typically not tightly integrated with development tools. This has a negative effect on program comprehension, increasing the effort and the time for obtaining answers. To improve program comprehension we propose to better integrate domain concepts and program comprehension tools into the development environment through moldable tools. Moldable tools are development tools that are aware of the current development context and support inexpensive creation of domain-specific extensions. We elaborate on the idea of moldable tools and show how to apply moldable tools to support object-oriented programming. Through practical examples we show how developers can embed domain concepts into their development tools.},
	Author = {Andrei Chi\c{s} and Tudor G\^irba and Juraj Kubelka and Oscar Nierstrasz and Stefan Reichhart and Aliaksei Syrel},
	Booktitle = {PAUSE: Present And Ulterior Software Engineering},
	Editor = {Manuel Mazzara, Bertrand Meyer},
	Title = {Moldable Tools for Object-oriented Development},
	Pages= {77--101},
	Publisher = {Springer, Cham},
	Doi = {10.1007/978-3-319-67425-4_6},
	Peerreview = {yes},
	Medium = {2},
	Keywords = {scg-pub snf-asa2 scg17 jb18, Andrei Chis, Tudor Girba, girba},
	Url = {http://scg.unibe.ch/archive/papers/Chis17a-MoldableToolsPAUSE.pdf},
	Bdsk-Url-1 = {http://scg.unibe.ch/archive/papers/Chis16c-MoldableToolsPAUSE.pdf},
	Bdsk-Url-2 = {https://link.springer.com/chapter/10.1007/978-3-319-67425-4_6},
	Year = {2017}}

@inproceedings{Gael03c,
	Abstract = {While assertions of Design by Contract from Eiffel
				  found its way into the language-definitions of
				  Python and of Java SDK 1.4, current object-oriented
				  languages do not make the concepts of unit-testing
				  explicit in their definitions or meta-models. Not
				  having support of unit-testing in a programming
				  language makes it harder to compose and re-compose
				  test-scenarios and tests. We propose, that an
				  object-oriented language should include explicit
				  concepts for example objects, example methods and
				  instance-specific assertions. This concepts ease the
				  composition of complex test-scenarios, they help to
				  refactor the program with the tests and also to keep
				  the duration of the tests as low and the coverage of
				  the tests as high as possible.},
	Annote = {internationalworkshop},
	Author = {Markus Gaelli},
	Booktitle = {Proceedings of the ECOOP '03 Workshop on Object-oriented Language Engineering for the Post-Java Era},
	Doi = {10.1007/b98806},
	Isbn = {978-3-540-22405-1},
	Keywords = {snf03 scg-none jb-none scg-pub gaelli},
	Misc = {gaelli},
	Month = jul,
	Note = {Abstract only --- full version availabe as technical report IAM-03-009},
	Pages = {143--153},
	Series = {LNCS},
	Title = {Test composition with example objects and example methods.},
	Url = {http://scg.unibe.ch/archive/papers/Gael03aTestComposition.pdf},
	Volume = {3013},
	Year = {2003},
	Bdsk-Url-1 = {http://scg.unibe.ch/archive/papers/Gael03aTestComposition.pdf},
	Bdsk-Url-2 = {http://dx.doi.org/10.1007/b98806}}

@inproceedings{Gael07a,
	Abstract = {Understanding and maintaining complex software
				  systems is a difficult task. In principle, tests can
				  be a good source of information about how the system
				  works. Unfortunately, tests are frequently
				  unstructured and disconnected from each other and
				  from their units under test. We propose a new
				  approach to organizing unit tests in which tests
				  produce examples of their units under tests which
				  also can be reused for composing higher-level tests.
				  The approach is based on the Eg meta-model, which
				  classifies tests according to their granularity and
				  their goals. We have developed the EgBrowser, an
				  experimental tool for specifying tests that conform
				  to the Eg metamodel while keeping track of the
				  connection between tests themselves and their units
				  under test. Initial usability studies suggest that
				  the approach is both easy to learn and more
				  efficient than the programmatic approach to
				  developing tests.},
	Annote = {internationalconference internationaljournal},
	Author = {Markus Gaelli and Rafael Wampfler and Oscar Nierstrasz},
	Booktitle = {Journal of Object Technology, Special Issue. Proceedings of TOOLS Europe 2007},
	Cached = {http://scg.unibe.ch/archive/papers/Gael07aComposingTests.pdf},
	Doi = {10.5381/jot.2007.6.9.a4},
	Keywords = {scg07 scg-pub skip-doi snf07 jb08 gaelli},
	Medium = {2},
	Month = oct,
	Pages = {71--86},
	Peerreview = {yes},
	Title = {Composing Tests from Examples},
	url = {http://www.jot.fm/issues/issue_2007_10/paper4.pdf},
	url2 = {http://www.jot.fm/contents/issue_2007_10/paper4.html},
	Volume = {6/9},
	Year = {2007},
	Bdsk-Url-1 = {http://www.jot.fm/issues/issue_2007_10/paper4/index.html%20http://www.jot.fm/issues/issue_2007_10/paper4.pdf}}

@misc{Girb19a,
	Author = {Tudor G\^irba},
	Keywords = {gtoolkit examples girba},
	Title = {An example of example-driven development},
	Url = {https://medium.com/feenk/an-example-of-example-driven-development-4dea0d995920},
	Year = {2019}
}

@misc{Girb20a,
	Author = {Tudor G\^irba},
	Keywords = {gtoolkit graphics brick bloc girba},
	Title = {One rendering tree},
	Url = {https://medium.com/feenk/one-rendering-tree-918eae49bcff},
	Year = {2020}
}

@misc{Girb21a,
	Author = {Tudor G\^irba},
	Keywords = {gtoolkit lepiter girba},
	Title = {Introducing {Lepiter}: Knowledge Management + Multi-language Notebooks + Moldable Development},
	Url = {https://lepiter.io/feenk/introducing-lepiter--knowledge-management--e2p6apqsz5npq7m4xte0kkywn/},
	Year = {2021}
}

@inproceedings{Kuhn08a,
	Abstract = {To quickly localize defects, we want our attention
				  to be focussed on relevant failing tests. We propose
				  to improve defect localization by exploiting
				  dependencies between tests, using a JUnit extension
				  called JExample. In a case study, a monolithic
				  white-box test suite for a complex algorithm is
				  refactored into two traditional JUnit style tests
				  and to JExample. Of the three refactorings, JExample
				  reports five times fewer defect locations and
				  slightly better performance (-8-12\%), while having
				  similar maintenance characteristics. Compared to the
				  original implementation, JExample greatly improves
				  maintainability due the improved factorization
				  following the accepted test quality guidelines. As
				  such, JExample combines the benefits of test chains
				  with test quality aspects of JUnit style testing.},
	Annote = {internationalconference},
	Author = {Adrian Kuhn and Bart Van Rompaey and Lea H\"ansenberger and Oscar Nierstrasz and Serge Demeyer and Markus Gaelli and Koenraad Van Leemput},
	Booktitle = {Extreme Programming and Agile Processes in Software Engineering, 9th International Conference, XP 2008},
	Doi = {10.1007/978-3-540-68255-4_8},
	Editor = {P. Abrahamsson},
	Isbn = {978-3-540-68254-7},
	Keywords = {scg08 scg-pub snf08 jb08 JExample akuhn gaelli haensenberger},
	Medium = {2},
	Pages = {73--82},
	Peerreview = {yes},
	Publisher = {Springer},
	Series = {Lecture Notes in Computer Science},
	Title = {{JExample}: Exploiting Dependencies Between Tests to Improve Defect Localization},
	Url = {http://scg.unibe.ch/archive/papers/Kuhn08aJExample.pdf},
	Year = {2008},
	Bdsk-Url-1 = {http://scg.unibe.ch/archive/papers/Kuhn08aJExample.pdf},
	Bdsk-Url-2 = {http://dx.doi.org/10.1007/978-3-540-68255-4_8}}

@inproceedings{Chis16a,
	Abstract = {Software systems involve many different kinds of domain-specific and interrelated software entities.
A common strategy employed by developers to deal with this reality is to perform exploratory investigations by means of searching.
Nevertheless, most integrated development environments (IDEs) support searching through generic and disconnected search tools.
This impedes search tasks over domain-specific entities as considerable effort is wasted by developers locating and linking data and concepts relevant to their application domains. To tackle this problem we propose Spotter, a moldable framework for supporting contextual-aware searching in IDEs by enabling developers to easily create custom searches for domain objects.  In this paper we motivate a set of requirements for Spotter and show, through usage scenarios, that Spotter improves program comprehension by reducing the effort required to find and search through concepts from a wide range of domains. Furthermore, we show that by taking code into account, Spotter can provide a single entry point for embedding search support within an IDE.},
	Author = {Andrei Chi\c{s} and Tudor G\^irba and Juraj Kubelka and Oscar Nierstrasz and Stefan Reichhart and Aliaksei Syrel},
	Booktitle = {Proceedings of the 2016 ACM International Symposium on New Ideas, New Paradigms, and Reflections on Programming and Software},
	Annote = {internationalconference},
	Series = {Onward! 2016},
	Title = {Moldable, context-aware searching with {Spotter}},
	Doi = {10.1145/2986012.2986023},
	pages = {128--144},
	Numpages = {17},
	Location = {Amsterdam, Netherlands},
	Year = {2016},
	Peerreview = {yes},
	Medium = {2},
	Publisher = {ACM},
	Keywords = {scg-pub scg16 jb17 snf-asa2 Andrei Chis, Spotter, Tudor Girba, girba},
	Url = {http://scg.unibe.ch/archive/papers/Chis16a-MoldableContextAwareSearchingWithSpotter.pdf},
	Bdsk-Url-1 = {http://scg.unibe.ch/archive/papers/Chis16a-MoldableContextAwareSearchingWithSpotter.pdf},
	Address = {New York, NY, USA}}

@misc{Bran17a,
  title={Smacc: a Compiler-Compiler},
  author={Brant, John and Lecerf, Jason and Goubier, Thierry and Ducasse, St{\'e}phane and Black, Andrew},
  year={2017},
  publisher={Pharo},
  url={https://books.pharo.org/booklet-Smacc/html/smacc.html}
}

